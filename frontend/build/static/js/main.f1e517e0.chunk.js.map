{"version":3,"sources":["img/60year-fsci.png","logo.svg","Class/ApiManage.js","Components/StudentForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ApiManage","this","host","StudentForm","props","state","imageURL","file","handleUploadImage","bind","ev","preventDefault","data","FormData","append","uploadInput","files","fileName","value","path","uploadApi","console","log","fetch","method","body","then","response","json","Fragment","className","onSubmit","ref","type","placeholder","src","alt","Component","Home","About","App","fsci","width","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,4LCa5BC,G,iBATX,aAAc,oBACVC,KAAKC,KAAO,yB,wDAIZ,OAAOD,KAAKC,KAAO,iB,MCgDZC,E,YApDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,SAAU,GACVC,KAAM,MAGV,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBARV,E,+EAWDC,GACdA,EAAGC,iBAEH,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQb,KAAKc,YAAYC,MAAM,IAC3CJ,EAAKE,OAAO,WAAYb,KAAKgB,SAASC,OAEtC,IACIC,GADM,IAAInB,GACCoB,YAEfC,QAAQC,IAAIH,GAEZI,MAAMJ,EAAM,CACRK,OAAQ,OACRC,KAAMb,IACPc,MAAK,SAAAC,GAAQ,OAAIA,EAASC,Y,+BAGvB,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,aACX,0BAAMC,SAAU9B,KAAKO,mBACjB,6BACI,2BAAOwB,IAAK,SAACA,GAAU,EAAKjB,YAAciB,GAAQC,KAAK,UAE3D,6BACI,2BAAOD,IAAK,SAACA,GAAU,EAAKf,SAAWe,GAAQC,KAAK,OAAOC,YAAY,oCAE3E,6BACA,6BACI,2CAEJ,yBAAKC,IAAKlC,KAAKI,MAAMC,SAAU8B,IAAI,e,GA7CjCC,aCMpBC,EAAO,kBAAM,qCACbC,EAAQ,kBAAM,sCAgBLC,MAdf,WACE,OACI,kBAAC,IAAMX,SAAP,KACI,yBAAKC,UAAU,OACX,yCACA,yBAAKK,IAAKM,IAAMC,MAAM,UACtB,kBAAC,IAAD,CAAOC,OAAK,EAACxB,KAAK,IAAIyB,UAAWN,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACxB,KAAK,SAASyB,UAAWL,IACtC,kBAAC,IAAD,CAAOI,OAAK,EAACxB,KAAK,OAAOyB,UAAWzC,OCT9B0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BCINC,IAASC,OAAO,mBAPM,kBAClB,kBAAC,IAAD,KACI,kBAAC,EAAD,SAKQ,MAAkBC,SAASC,eAAe,SD6GpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.f1e517e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/60year-fsci.9220599a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// \"use strict\"\r\n\r\nclass ApiManage {\r\n\r\n    constructor(){\r\n        this.host = \"http://127.0.0.1:5000/\"\r\n    }\r\n\r\n    uploadApi(){\r\n        return this.host + \"api/upload\"\r\n    }\r\n}\r\n\r\nexport default ApiManage","import React, { Component } from \"react\";\r\nimport axios from 'axios'\r\nimport ApiManage from \"../Class/ApiManage\";\r\n\r\nclass StudentForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            imageURL: '',\r\n            file: null,\r\n        }\r\n\r\n        this.handleUploadImage = this.handleUploadImage.bind(this)\r\n    }\r\n\r\n    handleUploadImage(ev) {\r\n        ev.preventDefault()\r\n\r\n        const data = new FormData()\r\n        data.append('file', this.uploadInput.files[0])\r\n        data.append('filename', this.fileName.value)\r\n\r\n        let Api = new ApiManage()\r\n        let path = Api.uploadApi()\r\n\r\n        console.log(path)\r\n\r\n        fetch(path, {\r\n            method: 'POST',\r\n            body: data,\r\n        }).then(response => response.json())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container\">\r\n                    <form onSubmit={this.handleUploadImage}>\r\n                        <div>\r\n                            <input ref={(ref) => { this.uploadInput = ref; }} type=\"file\" />\r\n                        </div>\r\n                        <div>\r\n                            <input ref={(ref) => { this.fileName = ref; }} type=\"text\" placeholder=\"Enter the desired name of file\" />\r\n                        </div>\r\n                        <br />\r\n                        <div>\r\n                            <button>Upload</button>\r\n                        </div>\r\n                        <img src={this.state.imageURL} alt=\"img\" />\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StudentForm","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport fsci from './img/60year-fsci.png'\n\n// import Route Tool\nimport { Route } from 'react-router-dom'\n\nimport StudentForm from './Components/StudentForm'\n\nconst Home = () => <h1>HOME</h1>\nconst About = () => <h1>About</h1>\n\nfunction App() {\n  return (\n      <React.Fragment>\n          <div className=\"App\">\n              <h1>NEW BUILD</h1>\n              <img src={fsci} width=\"100px\"/>\n              <Route exact path=\"/\" component={Home}/>\n              <Route exact path=\"/about\" component={About}/>\n              <Route exact path=\"/std\" component={StudentForm} />\n          </div>\n      </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import bootstrap set\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap/dist/js/bootstrap'\nimport $ from 'jquery'\nimport Popper from 'popper.js'\n\n// import route tool\nimport { BrowserRouter } from 'react-router-dom'\n\nconst AppWithRouter = () => (\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n)\n\n\nReactDOM.render(<AppWithRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}